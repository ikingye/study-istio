'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-istio/docs/advanced/deploy/install/','title':"安装",'section':"2.1 部署",'content':"Istio 安装 #  "});index.add({'id':2,'href':'/study-istio/docs/basic/arch/components/mixer/','title':"Mixer",'section':"组件",'content':"Mixer 基础 #  Mixer 已弃用。\nMixer 所提供的功能已迁移至 Envoy 代理中。 在 Istio 中对 Mixer 的支持将截止到 Istio 1.7 发行版。\n请参考 Telemetry V2，它取代了 Mixer 遥测。\n"});index.add({'id':4,'href':'/study-istio/docs/basic/arch/components/pilot/','title':"Pilot",'section':"组件",'content':"Pilot 基础 #  参考：\n 深入理解 Istio 核心组件之 Pilot 深入解读 Service Mesh 背后的技术细节  "});index.add({'id':5,'href':'/study-istio/docs/code/','title':"第三部分 设计与实现",'section':"Docs",'content':"如无特殊说明，源码版本为 1.5.2  "});index.add({'id':6,'href':'/study-istio/docs/basic/arch/components/citadel/','title':"Citadel",'section':"组件",'content':"Citadel #  "});index.add({'id':8,'href':'/study-istio/docs/basic/arch/components/galley/','title':"Galley",'section':"组件",'content':"Galley 基础 #  "});index.add({'id':9,'href':'/study-istio/docs/basic/concept/crd/','title':"Istio CRD",'section':"1.2 概念",'content':"Istio CRD #  CRD List #     CRD API group 作用     meshpolicies authentication.istio.io    policies authentication.istio.io    adapters config.istio.io    attributemanifests config.istio.io    handlers config.istio.io    httpapispecbindings config.istio.io    httpapispecs config.istio.io    instances config.istio.io    quotaspecbindings config.istio.io    quotaspecs config.istio.io    rules config.istio.io    templates config.istio.io    destinationrules networking.istio.io    envoyfilters networking.istio.io    gateways networking.istio.io    serviceentries networking.istio.io    sidecars networking.istio.io    virtualservices networking.istio.io    clusterrbacconfigs rbac.istio.io    rbacconfigs rbac.istio.io    servicerolebindings rbac.istio.io    serviceroles rbac.istio.io    authorizationpolicies security.istio.io    peerauthentications security.istio.io    requestauthentications security.istio.io     kubectl get customresourcedefinitions\n Pilot #  38 个，详见：pilot/pkg/config/kube/crd/types.gen.go\nMockConfig MockConfigList VirtualService VirtualServiceList Gateway GatewayList ServiceEntry ServiceEntryList SyntheticServiceEntry SyntheticServiceEntryList DestinationRule DestinationRuleList EnvoyFilter EnvoyFilterList Sidecar SidecarList HTTPAPISpec HTTPAPISpecList HTTPAPISpecBinding HTTPAPISpecBindingList QuotaSpec QuotaSpecList QuotaSpecBinding QuotaSpecBindingList Policy PolicyList MeshPolicy MeshPolicyList ServiceRole ServiceRoleList ServiceRoleBinding ServiceRoleBindingList RbacConfig RbacConfigList ClusterRbacConfig ClusterRbacConfigList AuthorizationPolicy AuthorizationPolicyList "});index.add({'id':10,'href':'/study-istio/docs/code/source/1.0.0/','title':"1.0.0",'section':"3.7 源码分析",'content':"Kubernetes 1.0.0 源码分析 #  https://github.com/kubernetes/kubernetes/tree/v1.0.0\n 代码行数 #  AlDanial/cloc $ cloc . 12059 text files. 11502 unique files. 1441 files ignored. github.com/AlDanial/cloc v 1.86 T=61.76 s (172.6 files/s, 58960.4 lines/s) -------------------------------------------------------------------------------- Language files blank comment code -------------------------------------------------------------------------------- Go 8710 270101 337300 2808944 YAML 665 1244 1748 32486 HTML 90 3350 194 28257 JSON 67 41 0 23021 Markdown 297 7243 0 20422 Protocol Buffers 370 9111 33369 18498 Python 46 1140 755 10919 Bourne Shell 138 1501 2158 6628 Assembly 67 893 1611 6487 JavaScript 12 272 167 2827 make 105 772 1871 2501 CSS 3 219 20 1042 Bourne Again Shell 10 89 110 622 TOML 10 206 198 480 Dockerfile 18 67 151 244 XML 8 14 22 199 Java 6 30 77 196 C/C++ Header 2 33 2 135 Ruby 1 24 23 103 Bazel 3 13 1 53 C 2 15 30 45 Gradle 4 8 0 45 SVG 6 0 0 37 Starlark 2 4 37 36 diff 16 0 1032 32 INI 2 5 0 18 SQL 1 2 0 11 DOS Batch 1 0 0 2 vim script 1 0 0 1 -------------------------------------------------------------------------------- SUM: 10663 296397 380876 2964291 -------------------------------------------------------------------------------- "});index.add({'id':11,'href':'/study-istio/docs/basic/quick/','title':"1.1 快速上手",'section':"第一部分 基础入门",'content':"Istio 快速上手 #  官网：https://github.com/istio/istio\nketacoda #  快速开始 Istio (by istio-handbook) #   概念 #  listener #  envoy 既然是 proxy，专门做转发，就得监听一个端口，接入请求，然后才能够根据策略转发，这个监听的地址称为 listener\nroute #  cluster #  由完全相同行为的多个 endpoint 组成，从 cluster 到 endpoint 的过程称为负载均衡。 cluster 里面配置负载均衡策略\nendpoint #  目标的 ip 地址和端口，这个是 proxy 最终将请求转发到的地方\n静态配置的例子如下：  workload #  WORKLOAD 是 operators 部署的二进制文件，用于提供服务网格应用的一些功能。\n在 Kubernetes 环境中，一个工作负载通常对应一个 Kubernetes deployment， 并且一个工作负载实例对应一个独立的被 deployment 管理的 pod。\n工作负载实例 #  工作负载实例是工作负载的一个二进制实例化对象。 一个工作负载实例可以开放零个或多个服务 endpoint， 也可以消费零个或多个 服务。\n工作负载实例具有许多属性：\n 名称和命名空间 唯一的 ID IP 地址 标签 主体  通过访问 source.* 和 destination.* 下面的属性，在 Istio 的策略和遥测配置功能中，可以用到这些属性。\n工作负载实例主体 #  WORKLOAD INSTANCE PRINCIPAL 工作负载实例主体是工作负载实例的可验证权限。Istio 的服务到服务身份验证用于生成工作负载实例主体。默认情况下，工作负载实例主体与 SPIFFE ID 格式兼容。\n在 policy 和 telemetry 配置中用到了工作负载实例主体，对应的属性是 source.principal 和 destination.principal。\n 遥测（telemetry） #  "});index.add({'id':12,'href':'/study-istio/docs/advanced/deploy/','title':"2.1 部署",'section':"第二部分 进阶实战",'content':"部署 #  "});index.add({'id':13,'href':'/study-istio/docs/code/istio/','title':"3.1 Istio",'section':"第三部分 设计与实现",'content':"Istio #  "});index.add({'id':14,'href':'/study-istio/docs/code/istio/structure/','title':"3.1.1 Istio 源码结构",'section':"3.1 Istio",'content':"Istio 源码结构 #  1.6.5 $ tree -L 2 . ├── BUGS-AND-FEATURE-REQUESTS.md ├── CODEOWNERS ├── CONTRIBUTING.md ├── LICENSE ├── Makefile ├── Makefile.core.mk ├── Makefile.overrides.mk ├── README.md ├── SUPPORT.md ├── bin │ ├── check_no_modify.sh │ ├── check_samples.sh │ ├── codecov.sh │ ├── codecov_diff.sh │ ├── diff_yaml.py │ ├── init.sh │ ├── mixer_codegen.sh │ ├── nomodify.md5 │ ├── protoc.sh │ ├── update_crds.sh │ ├── update_deps.sh │ └── update_no_modify.sh ├── codecov.skip ├── codecov.threshold ├── common │ ├── Makefile.common.mk │ ├── config │ └── scripts ├── common-protos │ ├── github.com │ ├── gogoproto │ ├── google │ └── k8s.io ├── docker │ ├── Dockerfile.base │ └── ca-certificates.tgz ├── galley │ ├── README.md │ ├── pkg │ ├── testdatasets │ └── tools ├── go.mod ├── go.sum ├── install │ ├── consul │ ├── gcp │ └── tools ├── istio.deps ├── istioctl │ ├── cmd │ ├── docker │ └── pkg ├── licenses │ ├── ... ├── manifests │ ├── addons │ ├── charts │ └── profiles ├── mixer │ ├── README.md │ ├── adapter │ ├── cmd │ ├── docker │ ├── pkg │ ├── template │ ├── test │ ├── testdata │ └── tools ├── operator │ ├── ARCHITECTURE.md │ ├── LICENSE │ ├── README.md │ ├── cmd │ ├── codecov.skip │ ├── codecov.threshold │ ├── data │ ├── deploy │ ├── docker │ ├── images │ ├── operator.mk │ ├── pkg │ ├── samples │ ├── scripts │ └── version ├── pilot │ ├── cmd │ ├── docker │ ├── pkg │ ├── test │ └── tools ├── pkg │ ├── adsc │ ├── bootstrap │ ├── cmd │ ├── config │ ├── dns │ ├── envoy │ ├── istio-agent │ ├── jwt │ ├── keepalive │ ├── kube │ ├── mcp │ ├── proto │ ├── queue │ ├── spiffe │ ├── test │ ├── tracing │ ├── util │ └── webhooks ├── prow │ ├── config │ ├── integ-suite-kind.sh │ ├── integ-suite-local.sh │ ├── lib.sh │ ├── release-commit.sh │ ├── release-test.sh │ └── upload-istioio-snippets.sh ├── release │ ├── downloadIstioCandidate.sh │ └── downloadIstioCtl.sh ├── samples │ ├── README.md │ ├── addons │ ├── bookinfo │ ├── certs │ ├── custom-bootstrap │ ├── external │ ├── fortio │ ├── health-check │ ├── helloworld │ ├── httpbin │ ├── https │ ├── kubernetes-blog │ ├── multicluster │ ├── rawvm │ ├── security │ ├── sleep │ ├── tcp-echo │ └── websockets ├── security │ ├── README.md │ ├── cmd │ ├── pkg │ ├── proto │ ├── samples │ └── tools ├── test.go ├── tests │ ├── apps │ ├── binary │ ├── codecov │ ├── common │ ├── integration │ ├── istio.mk │ ├── testdata │ └── util ├── tools │ ├── buildx-gen.sh │ ├── certs │ ├── convert_RbacConfig_to_ClusterRbacConfig.sh │ ├── dump_kubernetes.sh │ ├── gen_istio_image_list.sh │ ├── istio-clean-iptables │ ├── istio-docker.mk │ ├── istio-iptables │ └── packaging └── vendor ├── cloud.google.com ├── code.cloudfoundry.org ├── contrib.go.opencensus.io ├── fortio.org ├── github.com ├── go.opencensus.io ├── go.uber.org └── golang.org 144 directories, 54 files 1.4.6  "});index.add({'id':15,'href':'/study-istio/docs/appendix/tutorial/','title':"4.1 教程",'section':"第四部分 附录",'content':"Istio 教程 #  基础 #   katacoda: 使用 istioctl 安装 istio 绿色记忆: Istio 学习笔记 绿色记忆: Istio Pilot 与 Envoy 的交互机制解读  进阶 #  "});index.add({'id':16,'href':'/study-istio/docs/advanced/eco/envoy/','title':"Envoy",'section':"2.8 生态",'content':"Envoy #  envoyproxy/envoy 线程模型 #  Envoy 使用单进程 - 多线程的架构模型。 一个 master 线程管理各种琐碎的任务，而一些 worker 线程则负责执行监听、过滤和转发。 当监听器接收到一个连接请求时，该连接将其生命周期绑定到一个单独的 worker 线程。 这使得 Envoy 主要使用大量单线程（ embarrassingly parallel ）处理工作，并且只有少量的复杂代码用于实现 worker 线程之间的协调工作。 通常情况下，Envoy 实现了 100% 的非阻塞。 对于大多数工作负载，我们建议将 worker 线程数配置为 CPU 的线程数。\n参考：\n https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/intro/threading_model   BUILT ON ENVOY #   datawire/ambassador  cilium/cilium  Cloud Foundry hashicorp/consul  projectcontour/contour  saarasio/enroute  projectcontour/gimbal  solo-io/envoy-operator  tetratelabs/getenvoy  solo-io/gloo  istio/istio  kumahq/kuma  turbinelabs/rotor  solo-io/service-mesh-hub   参考：\n https://www.envoyproxy.io/community   envoy timeout #  chemicL/envoy-timeouts Demonstrating Envoy timeouts and their impact on service to service communication\n"});index.add({'id':17,'href':'/study-istio/docs/advanced/eco/other/tracing/jaeger/','title':"Jaeger",'section':"Distributed Tracing",'content':"Jaeger #  Jaeger \\ˈyā-gər\\\njaegertracing/jaeger CNCF Jaeger, a Distributed Tracing Platform https://www.jaegertracing.io/\n"});index.add({'id':18,'href':'/study-istio/docs/advanced/eco/other/ingress/kong-ingress/','title':"Kong Ingress",'section':"Ingress Controller",'content':"Kong Ingress #  Kong/kubernetes-ingress-controller Kong for Kubernetes\n"});index.add({'id':19,'href':'/study-istio/docs/advanced/eco/envoy/xds/lds/','title':"LDS",'section':"xDS",'content':"LDS #  监听器发现服务（LDS）是一个可选的 API，Envoy 将调用它来动态获取监听器。Envoy 将协调 API 响应，并根据需要添加、修改或删除已知的监听器。\n监听器更新的语义如下：\n 每个监听器必须有一个独特的名字。如果没有提供名称，Envoy 将创建一个 UUID。要动态更新的监听器，管理服务必须提供监听器的唯一名称。 当一个监听器被添加，在参与连接处理之前，会先进入 “预热” 阶段。例如，如果监听器引用 RDS 配置，那么在监听器迁移到 “active” 之前，将会解析并提取该配置。 监听器一旦创建，实际上就会保持不变。因此，更新监听器时，会创建一个全新的监听器（使用相同的侦听套接字）。新增加的监听者都会通过上面所描述的相同 “预热” 过程。 当更新或删除监听器时，旧的监听器将被置于 “draining（逐出）” 状态，就像整个服务重新启动时一样。监听器移除之后，该监听器所拥有的连接，经过一段时间优雅地关闭（如果可能的话）剩余的连接。逐出时间通过 --drain-time-s 选项设置。  注意\n 任何在 Envoy 配置中静态定义的监听器都不能通过 LDS API 进行修改或删除。\n "});index.add({'id':20,'href':'/study-istio/docs/advanced/eco/nginx/','title':"Nginx",'section':"2.8 生态",'content':"Nginx #  nginx/nginx  教程 #  Nginx 开发从入门到精通 #  taobao/nginx-book "});index.add({'id':21,'href':'/study-istio/docs/advanced/eco/openresty/','title':"OpenResty",'section':"2.8 生态",'content':"OpenResty #  openresty/openresty 参考：\n OpenResty 究竟解决了什么痛点？   教程 #  参考：\n Programming OpenResty - 章亦春 OpenResty 最佳实践  "});index.add({'id':22,'href':'/study-istio/docs/code/istio/pilot/','title':"Pilot",'section':"3.1 Istio",'content':"Pilot #  若无特别说明，本文是根据 Istio 1.6.5 进行分析。  pilot discovery #  函数调用栈 #   NewServer  initConfigController  makeKubeConfigController  (add schema) collections.Pilot.All() NewClient NewController  (add stores for CRD kinds) addInformer  newCacheHandler  informer := cache.NewSharedIndexInformer(\u0026hellip;) informer.AddEventHandler  queue.Push(onEvent)           s.ConfigStores = append(s.ConfigStores, configController) aggregateConfigController, err := configaggregate.MakeCache(s.ConfigStores) s.configController = aggregateConfigController addStartFunc   initServiceControllers  NewServiceDiscovery  RegisterEventHandler: 注册 serviceEntryKind 与 workloadEntryKind 的 handler     initDiscoveryService  initEventHandlers  定义 handler  s.EnvoyXdsServer.ConfigUpdate(pushReq): 真正做的事情，更新 envoy xds 配置   添加 handler       discoveryServer.Start(stop)  (crd controller) Run  informer.Run(stop) cache.WaitForCacheSync(stop, c.HasSynced): 等待 Informer 完成一次本地缓存的数据同步操作 c.queue.Run(stop): 执行 queue.tasks，即 cacheHandler.onEvent  执行 handlers        "});index.add({'id':23,'href':'/study-istio/docs/advanced/eco/envoy/xds/','title':"xDS",'section':"Envoy",'content':"xDS #  envoy 接口列表\nconst auto methods = { \u0026#34;envoy.api.v2.ClusterDiscoveryService.FetchClusters\u0026#34;, \u0026#34;envoy.api.v2.ClusterDiscoveryService.StreamClusters\u0026#34;, \u0026#34;envoy.api.v2.EndpointDiscoveryService.FetchEndpoints\u0026#34;, \u0026#34;envoy.api.v2.EndpointDiscoveryService.StreamEndpoints\u0026#34;, \u0026#34;envoy.api.v2.ListenerDiscoveryService.FetchListeners\u0026#34;, \u0026#34;envoy.api.v2.ListenerDiscoveryService.StreamListeners\u0026#34;, \u0026#34;envoy.api.v2.RouteDiscoveryService.FetchRoutes\u0026#34;, \u0026#34;envoy.api.v2.RouteDiscoveryService.StreamRoutes\u0026#34;, \u0026#34;envoy.service.discovery.v2.AggregatedDiscoveryService.StreamAggregatedResources\u0026#34;, \u0026#34;envoy.service.discovery.v2.HealthDiscoveryService.FetchHealthCheck\u0026#34;, \u0026#34;envoy.service.discovery.v2.HealthDiscoveryService.StreamHealthCheck\u0026#34;, \u0026#34;envoy.service.discovery.v2.RuntimeDiscoveryService.FetchRuntime\u0026#34;, \u0026#34;envoy.service.discovery.v2.RuntimeDiscoveryService.StreamRuntime\u0026#34;, \u0026#34;envoy.service.accesslog.v2.AccessLogService.StreamAccessLogs\u0026#34;, \u0026#34;envoy.service.metrics.v2.MetricsService.StreamMetrics\u0026#34;, \u0026#34;envoy.service.ratelimit.v2.RateLimitService.ShouldRateLimit\u0026#34;, \u0026#34;udpa.service.orca.v1.OpenRcaService.StreamCoreMetrics\u0026#34;, }; CDS #  EDS #  LDS #  RDS #  参考：\n 深入解读 Service Mesh 背后的技术细节  "});index.add({'id':24,'href':'/study-istio/docs/basic/quick/install/','title':"安装",'section':"1.1 快速上手",'content':"Istio 安装 #  快速安装（适合新人） #   Download and install Istio Deploy the sample application Open the application to outside traffic View the dashboard  使用 Istioctl 进行安装 #  下载 Istio release #  [完成平台设置](platform-specific setup) #  Check the Requirements for Pods and Services #  Install Istio using the default profile #  export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath=\u0026#39;{.items[0].status.hostIP}\u0026#39;) export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.spec.ports[?(@.name==\u0026#34;http2\u0026#34;)].nodePort}\u0026#39;) export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.spec.ports[?(@.name==\u0026#34;https\u0026#34;)].nodePort}\u0026#39;) export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT echo http://$GATEWAY_URL/productpage "});index.add({'id':25,'href':'/study-istio/docs/basic/concept/','title':"1.2 概念",'section':"第一部分 基础入门",'content':"Istio 概念 #  "});index.add({'id':26,'href':'/study-istio/docs/advanced/tool/','title':"2.2 工具",'section':"第二部分 进阶实战",'content':"工具 #  "});index.add({'id':27,'href':'/study-istio/docs/appendix/interview/','title':"4.2 面试题",'section':"第四部分 附录",'content':"Istio 面试题 #  基础题 #  进阶题 #  "});index.add({'id':28,'href':'/study-istio/docs/advanced/eco/other/ingress/ambassador/','title':"Ambassador",'section':"Ingress Controller",'content':"Ambassador #  datawire/ambassador Open source Kubernetes-native API gateway for microservices built on the Envoy Proxy\n"});index.add({'id':29,'href':'/study-istio/docs/basic/concept/api-resources/','title':"API Resources",'section':"1.2 概念",'content':"Istio API Resources #  kubectl api-resources\n1.6.5 25 个 Istio CRD：\n adapter attributemanifest  describes a set of Attributes produced by some component of an Istio deployment.   handler HTTPAPISpecBinding HTTPAPISpec instance QuotaSpecBinding QuotaSpec rule template IstioOperator  defines the desired installed state of Istio components   DestinationRule  defines policies that apply to traffic intended for a service after routing has occurred.   EnvoyFilter  provides a mechanism to customize the Envoy configuration generated by Istio Pilot.   Gateway  describes a load balancer operating at the edge of the mesh receiving incoming or outgoing HTTP/TCP connections.   ServiceEntry Sidecar VirtualService  Configuration affecting traffic routing.   WorkloadEntry  enables operators to describe the properties of a single non-Kubernetes workload such as a VM or a bare metal server as it is onboarded into the mesh.   ClusterRbacConfig RbacConfig ServiceRoleBinding ServiceRole AuthorizationPolicy PeerAuthentication RequestAuthentication   相比于 1.4.6\n 多了  IstioOperator WorkloadEntry   少了  MeshPolicy Policy       NAME SHORTNAMES APIGROUP NAMESPACED KIND 定义代码 备注     bindings   true Binding     componentstatuses cs  false ComponentStatus     configmaps cm  true ConfigMap     endpoints ep  true Endpoints     events ev  true Event     limitranges limits  true LimitRange     namespaces ns  false Namespace     nodes no  false Node     persistentvolumeclaims pvc  true PersistentVolumeClaim     persistentvolumes pv  false PersistentVolume     pods po  true Pod     podtemplates   true PodTemplate     replicationcontrollers rc  true ReplicationController     resourcequotas quota  true ResourceQuota     secrets   true Secret     serviceaccounts sa  true ServiceAccount     services svc  true Service     mutatingwebhookconfigurations  admissionregistration.k8s.io false MutatingWebhookConfiguration     validatingwebhookconfigurations  admissionregistration.k8s.io false ValidatingWebhookConfiguration     customresourcedefinitions crd,crds apiextensions.k8s.io false CustomResourceDefinition     apiservices  apiregistration.k8s.io false APIService     controllerrevisions  apps true ControllerRevision     daemonsets ds apps true DaemonSet     deployments deploy apps true Deployment     replicasets rs apps true ReplicaSet     statefulsets sts apps true StatefulSet     tokenreviews  authentication.k8s.io false TokenReview     localsubjectaccessreviews  authorization.k8s.io true LocalSubjectAccessReview     selfsubjectaccessreviews  authorization.k8s.io false SelfSubjectAccessReview     selfsubjectrulesreviews  authorization.k8s.io false SelfSubjectRulesReview     subjectaccessreviews  authorization.k8s.io false SubjectAccessReview     horizontalpodautoscalers hpa autoscaling true HorizontalPodAutoscaler     cronjobs cj batch true CronJob     jobs  batch true Job     certificatesigningrequests csr certificates.k8s.io false CertificateSigningRequest     adapters  config.istio.io true adapter     attributemanifests  config.istio.io true attributemanifest     handlers  config.istio.io true handler     httpapispecbindings  config.istio.io true HTTPAPISpecBinding     httpapispecs  config.istio.io true HTTPAPISpec     instances  config.istio.io true instance     quotaspecbindings  config.istio.io true QuotaSpecBinding     quotaspecs  config.istio.io true QuotaSpec     rules  config.istio.io true rule     templates  config.istio.io true template     leases  coordination.k8s.io true Lease     endpointslices  discovery.k8s.io true EndpointSlice     events ev events.k8s.io true Event     ingresses ing extensions true Ingress     istiooperators iop install.istio.io true IstioOperator     destinationrules dr networking.istio.io true DestinationRule     envoyfilters  networking.istio.io true EnvoyFilter     gateways gw networking.istio.io true Gateway     serviceentries se networking.istio.io true ServiceEntry     sidecars  networking.istio.io true Sidecar     virtualservices vs networking.istio.io true VirtualService     workloadentries we networking.istio.io true WorkloadEntry     ingressclasses  networking.k8s.io false IngressClass     ingresses ing networking.k8s.io true Ingress     networkpolicies netpol networking.k8s.io true NetworkPolicy     runtimeclasses  node.k8s.io false RuntimeClass     poddisruptionbudgets pdb policy true PodDisruptionBudget     podsecuritypolicies psp policy false PodSecurityPolicy     clusterrolebindings  rbac.authorization.k8s.io false ClusterRoleBinding     clusterroles  rbac.authorization.k8s.io false ClusterRole     rolebindings  rbac.authorization.k8s.io true RoleBinding     roles  rbac.authorization.k8s.io true Role     clusterrbacconfigs  rbac.istio.io false ClusterRbacConfig     rbacconfigs  rbac.istio.io true RbacConfig     servicerolebindings  rbac.istio.io true ServiceRoleBinding     serviceroles  rbac.istio.io true ServiceRole     priorityclasses pc scheduling.k8s.io false PriorityClass     authorizationpolicies  security.istio.io true AuthorizationPolicy     peerauthentications pa security.istio.io true PeerAuthentication     requestauthentications ra security.istio.io true RequestAuthentication     csidrivers  storage.k8s.io false CSIDriver     csinodes  storage.k8s.io false CSINode     storageclasses sc storage.k8s.io false StorageClass     volumeattachments  storage.k8s.io false VolumeAttachment      1.4.6 25 个 Istio CRD：\n MeshPolicy Policy adapter attributemanifest handler HTTPAPISpecBinding HTTPAPISpec instance QuotaSpecBinding QuotaSpec rule template DestinationRule EnvoyFilter Gateway ServiceEntry Sidecar VirtualService ClusterRbacConfig RbacConfig ServiceRoleBinding ServiceRole AuthorizationPolicy PeerAuthentication RequestAuthentication     NAME SHORTNAMES APIGROUP NAMESPACED KIND 定义代码 备注     bindings   true Binding     componentstatuses cs  false ComponentStatus     configmaps cm  true ConfigMap     endpoints ep  true Endpoints     events ev  true Event     limitranges limits  true LimitRange     namespaces ns  false Namespace     nodes no  false Node     persistentvolumeclaims pvc  true PersistentVolumeClaim     persistentvolumes pv  false PersistentVolume     pods po  true Pod     podtemplates   true PodTemplate     replicationcontrollers rc  true ReplicationController     resourcequotas quota  true ResourceQuota     secrets   true Secret     serviceaccounts sa  true ServiceAccount     services svc  true Service     mutatingwebhookconfigurations  admissionregistration.k8s.io false MutatingWebhookConfiguration     validatingwebhookconfigurations  admissionregistration.k8s.io false ValidatingWebhookConfiguration     customresourcedefinitions crd, crds apiextensions.k8s.io false CustomResourceDefinition     apiservices  apiregistration.k8s.io false APIService     controllerrevisions  apps true ControllerRevision     daemonsets ds apps true DaemonSet     deployments deploy apps true Deployment     replicasets rs apps true ReplicaSet     statefulsets sts apps true StatefulSet     meshpolicies  authentication.istio.io false MeshPolicy     policies  authentication.istio.io true Policy     tokenreviews  authentication.k8s.io false TokenReview     localsubjectaccessreviews  authorization.k8s.io true LocalSubjectAccessReview     selfsubjectaccessreviews  authorization.k8s.io false SelfSubjectAccessReview     selfsubjectrulesreviews  authorization.k8s.io false SelfSubjectRulesReview     subjectaccessreviews  authorization.k8s.io false SubjectAccessReview     horizontalpodautoscalers hpa autoscaling true HorizontalPodAutoscaler     cronjobs cj batch true CronJob     jobs  batch true Job     certificatesigningrequests csr certificates.k8s.io false CertificateSigningRequest     stacks  compose.docker.com true Stack     adapters  config.istio.io true adapter     attributemanifests  config.istio.io true attributemanifest     handlers  config.istio.io true handler     httpapispecbindings  config.istio.io true HTTPAPISpecBinding     httpapispecs  config.istio.io true HTTPAPISpec     instances  config.istio.io true instance     quotaspecbindings  config.istio.io true QuotaSpecBinding     quotaspecs  config.istio.io true QuotaSpec     rules  config.istio.io true rule     templates  config.istio.io true template     leases  coordination.k8s.io true Lease     events ev events.k8s.io true Event     daemonsets ds extensions true DaemonSet     deployments deploy extensions true Deployment     ingresses ing extensions true Ingress     networkpolicies netpol extensions true NetworkPolicy     podsecuritypolicies psp extensions false PodSecurityPolicy     replicasets rs extensions true ReplicaSet     destinationrules dr networking.istio.io true DestinationRule     envoyfilters  networking.istio.io true EnvoyFilter     gateways gw networking.istio.io true Gateway     serviceentries se networking.istio.io true ServiceEntry     sidecars  networking.istio.io true Sidecar     virtualservices vs networking.istio.io true VirtualService     ingresses ing networking.k8s.io true Ingress     networkpolicies netpol networking.k8s.io true NetworkPolicy     runtimeclasses  node.k8s.io false RuntimeClass     poddisruptionbudgets pdb policy true PodDisruptionBudget     podsecuritypolicies psp policy false PodSecurityPolicy     clusterrolebindings  rbac.authorization.k8s.io false ClusterRoleBinding     clusterroles  rbac.authorization.k8s.io false ClusterRole     rolebindings  rbac.authorization.k8s.io true RoleBinding     roles  rbac.authorization.k8s.io true Role     clusterrbacconfigs  rbac.istio.io false ClusterRbacConfig     rbacconfigs  rbac.istio.io true RbacConfig     servicerolebindings  rbac.istio.io true ServiceRoleBinding     serviceroles  rbac.istio.io true ServiceRole     priorityclasses pc scheduling.k8s.io false PriorityClass     authorizationpolicies  security.istio.io true AuthorizationPolicy     peerauthentications  security.istio.io true PeerAuthentication     requestauthentications  security.istio.io true RequestAuthentication     csidrivers  storage.k8s.io false CSIDriver     csinodes  storage.k8s.io false CSINode     storageclasses sc storage.k8s.io false StorageClass     volumeattachments  storage.k8s.io false VolumeAttachment        VirtualService #   metadata  name   spec  hosts http  match (Request Routing, 配置请求路由)  headers  end-user  exact     port uri  prefix     fault (Fault Injection, 故障注入)  delay (延迟故障)  percentage fixedDelay   abort (abort 故障)  percentage httpStatus     route  destination  host subset port  number     weight (Traffic Shifting, 流量转移)   timeout (Request Timeouts, 设置请求超时) retries  attempts perTryTimeout     tcp  route  destination weight (TCP Traffic Shifting, TCP 流量转移)        DestinationRule #   spec:  host trafficPolicy  connectionPool  tcp  maxConnections   http  http1MaxPendingRequests (HTTP 请求的最大排队数量) maxRequestsPerConnection (一个连接内最大请求数，如果为 1，表示禁用 keep alive)     outlierDetection  consecutiveErrors interval baseEjectionTime maxEjectionPercent   loadBalancer  simple     subsets  name labels  version   trafficPolicy (Circuit breakers, 熔断器)  loadBalancer  simple   connectionPool  tcp  maxConnections            Gateway #   spec  selector  app   servers  port  name number protocol   hosts tls      ServiceEntry #   spec  hosts ports location resolution    ServiceAccount #   metadata  name   spec  handler #   metadata  name namespace   spec  compiledAdapter params  quotas  name maxAmount validDuration overrides  dimensions  destination   maxAmount validDuration          instance #  "});index.add({'id':30,'href':'/study-istio/docs/advanced/eco/envoy/xds/cds/','title':"CDS",'section':"xDS",'content':"CDS #  "});index.add({'id':31,'href':'/study-istio/docs/advanced/eco/other/ingress/traefik/','title':"Traefik",'section':"Ingress Controller",'content':"Traefik #  traefik/traefik The Cloud Native Application Proxy https://traefik.io/\n"});index.add({'id':32,'href':'/study-istio/docs/basic/arch/','title':"1.3 架构",'section':"第一部分 基础入门",'content':"Istio 架构 #  1.6 #   1.5 #  Istiod #  Istiod provides service discovery, configuration and certificate management.\n 1.4 #  Pilot #   1.1 #  "});index.add({'id':33,'href':'/study-istio/docs/advanced/feature/','title':"2.3 功能",'section':"第二部分 进阶实战",'content':"功能 #  "});index.add({'id':34,'href':'/study-istio/docs/appendix/attention/','title':"4.3 关注项目",'section':"第四部分 附录",'content':"关注项目 #  istio/istio #  Connect, secure, control, and observe services. https://istio.io\nenvoyproxy/envoy #  Cloud-native high-performance edge/middle/service proxy https://www.envoyproxy.io\nkiali/kiali #  Kiali project, observability for the Istio service mesh\nmosn/mosn #  MOSN is a cloud native proxy for edge or service mesh. https://mosn.io\nrancher/rio Application Deployment Engine for Kubernetes https://rio.io\n其他 #  kubernetes/kubernetes #  Production-Grade Container Scheduling and Management https://kubernetes.io\nopenzipkin/zipkin #  Zipkin is a distributed tracing system https://zipkin.io/\njaegertracing/jaeger #  CNCF Jaeger, a Distributed Tracing Platform https://www.jaegertracing.io/\ndapr/dapr #  layer5io/meshery #  Meshery, the service mesh management plane https://meshery.io/\n"});index.add({'id':35,'href':'/study-istio/docs/advanced/eco/other/ingress/contour/','title':"Contour",'section':"Ingress Controller",'content':"Contour #  projectcontour/contour Contour is a Kubernetes ingress controller using Envoy proxy.\n"});index.add({'id':36,'href':'/study-istio/docs/advanced/eco/envoy/xds/eds/','title':"EDS",'section':"xDS",'content':"EDS #  "});index.add({'id':37,'href':'/study-istio/docs/advanced/eco/other/ingress/','title':"Ingress Controller",'section':"其他",'content':"Ingress Controller #  "});index.add({'id':38,'href':'/study-istio/docs/code/istio/circuit-break/','title':"Istio 熔断",'section':"3.1 Istio",'content':"Istio 熔断 #  "});index.add({'id':39,'href':'/study-istio/docs/code/istio/rate-limit/','title':"Istio 限流",'section':"3.1 Istio",'content':"Istio 限流 #  "});index.add({'id':40,'href':'/study-istio/docs/advanced/eco/other/linkerd/','title':"Linkerd",'section':"其他",'content':"Linkerd #  linkerd/linkerd2 Ultralight, security-first service mesh for Kubernetes. Main repo for Linkerd 2.x. https://linkerd.io/\nlinkerd/linkerd A service mesh for Kubernetes and beyond. Main repo for Linkerd 1.x. https://linkerd.io/\n"});index.add({'id':41,'href':'/study-istio/docs/advanced/eco/other/tracing/skywalking/','title':"SkyWalking",'section':"Distributed Tracing",'content':"SkyWalking #  apache/skywalking APM, Application Performance Monitoring System https://skywalking.apache.org/\n"});index.add({'id':42,'href':'/study-istio/docs/basic/arch/components/','title':"组件",'section':"1.3 架构",'content':"组件 #  "});index.add({'id':43,'href':'/study-istio/docs/basic/other/','title':"1.4 其他",'section':"第一部分 基础入门",'content':"其他 #  "});index.add({'id':44,'href':'/study-istio/docs/advanced/eco/other/tracing/','title':"Distributed Tracing",'section':"其他",'content':"Distributed Tracing #  opentracing Supported tracers\n jaegertracing/jaeger  openzipkin/zipkin  LightStep Instana Apache SkyWalking inspectIT stagemonitor Datadog Wavefront by VMware Elastic APM  参考：\n Dapper, a Large-Scale Distributed Systems Tracing Infrastructure  "});index.add({'id':45,'href':'/study-istio/docs/advanced/eco/other/gloo/','title':"Gloo",'section':"其他",'content':"Gloo #  solo-io/gloo The Feature-rich, Kubernetes-native, Next-Generation API Gateway Built on Envoy\n"});index.add({'id':46,'href':'/study-istio/docs/advanced/eco/envoy/xds/rds/','title':"RDS",'section':"xDS",'content':"RDS #  "});index.add({'id':47,'href':'/study-istio/docs/advanced/eco/other/tracing/zipkin/','title':"Zipkin",'section':"Distributed Tracing",'content':"Zipkin #  openzipkin/zipkin Zipkin is a distributed tracing system https://zipkin.io/\n"});index.add({'id':48,'href':'/study-istio/docs/advanced/eco/envoy/version/','title':"版本",'section':"Envoy",'content':"Envoy 版本 #  参考： https://www.envoyproxy.io/docs/envoy/v1.15.0/version_history/version_history\n1.17 #  1.17.0 #  1.16 #  1.16.0 (2020-10-08) #   1.15 #  1.15.0 (2020-07-06) #   1.14 #  1.14.3 (2020-06-30) #  1.14.2 (2020-06-08) #  1.14.0 (2020-04-08) #   1.13 #  1.13.3 (2020-06-30) #  1.13.0 (2020-01-20) #   1.12 #  1.12.5 (2020-06-30) #  1.12.1 (2019-11-08) #   1.5 (2017-12-04) #   1.4 (2017-08-24) #   1.3 (2017-05-17) #   1.2 (2017-03-07) #   1.1 (2016-11-30) #   1.0 (2016-09-12) #  "});index.add({'id':49,'href':'/study-istio/docs/basic/other/version/','title':"版本",'section':"1.4 其他",'content':"Istio 版本 #  istio/istio 参考： https://istio.io/news/releases/\n1.7 #   1.6 #  1.6.5 (2020-07-09) #  1.6.0 (2020-05-21) #   1.5 #  1.5.8 (2020-07-09) #  1.5.0 (2020-03-05) #   1.4 #  1.4.0 (2019-11-14) #   1.3 #   1.2 #   1.1 #   1.0 #    0.x #  0.8 (2018-06-01) #  0.2 (2017-10-10) #  0.1 (2017-05-24) #  "});index.add({'id':50,'href':'/study-istio/docs/advanced/debug/','title':"2.5 故障排查",'section':"第二部分 进阶实战",'content':"故障排查 #  "});index.add({'id':51,'href':'/study-istio/docs/advanced/eco/other/apisix/','title':"APISIX",'section':"其他",'content':"APISIX #  apache/apisix "});index.add({'id':52,'href':'/study-istio/docs/advanced/eco/other/ingress/istio-ingress/','title':"Istio Ingress",'section':"Ingress Controller",'content':"Istio Ingress #  "});index.add({'id':53,'href':'/study-istio/docs/advanced/eco/other/kong/','title':"Kong",'section':"其他",'content':"Kong #  Kong/kong Kong is a cloud-native, fast, scalable, and distributed Microservice Abstraction Layer (also known as an API Gateway or API Middleware). Made available as an open-source project in 2015, its core values are high performance and extensibility.\n Quickstart #  "});index.add({'id':54,'href':'/study-istio/docs/advanced/eco/other/ingress/ingress-nginx/','title':"kubernetes/ingress-nginx",'section':"Ingress Controller",'content':"NGINX Ingress Controller #  kubernetes/ingress-nginx NGINX Ingress Controller for Kubernetes https://kubernetes.github.io/ingress-nginx/\n"});index.add({'id':55,'href':'/study-istio/docs/advanced/prof/','title':"2.6 性能",'section':"第二部分 进阶实战",'content':"性能 #  "});index.add({'id':56,'href':'/study-istio/docs/advanced/eco/other/haproxy/','title':"haproxy",'section':"其他",'content':"Haproxy #  haproxy/haproxy HAProxy Load Balancer\u0026rsquo;s development branch (mirror of git.haproxy.org) https://git.haproxy.org/\n"});index.add({'id':57,'href':'/study-istio/docs/advanced/eco/other/ingress/haproxy-ingress/','title':"Haproxy Ingress",'section':"Ingress Controller",'content':"Haproxy Ingress #  jcmoraisjr/haproxy-ingress #  jcmoraisjr/haproxy-ingress "});index.add({'id':58,'href':'/study-istio/docs/advanced/eco/other/mosn/','title':"MOSN",'section':"其他",'content':"MOSN #  mosn/mosn MOSN is a cloud native proxy for edge or service mesh. https://mosn.io\n"});index.add({'id':59,'href':'/study-istio/docs/advanced/test/test/','title':"2.7 测试",'section':"第二部分 进阶实战",'content':"测试 #  open-policy-agent/conftest #  Write tests against structured configuration data using the Open Policy Agent Rego query language\n"});index.add({'id':60,'href':'/study-istio/docs/advanced/eco/other/dapr/','title':"Dapr",'section':"其他",'content':"Dapr #  dapr/dapr Dapr is a portable, serverless, event-driven runtime that makes it easy for developers to build resilient, stateless and stateful microservices that run on the cloud and edge and embraces the diversity of languages and developer frameworks.\n"});index.add({'id':61,'href':'/study-istio/docs/advanced/eco/other/tracing/lightstep/','title':"LightStep",'section':"Distributed Tracing",'content':"LightStep #  https://lightstep.com/\nlightstep-tracer-go #  lightstep/lightstep-tracer-go "});index.add({'id':62,'href':'/study-istio/docs/advanced/eco/','title':"2.8 生态",'section':"第二部分 进阶实战",'content':"生态 #  SMI (Service Mesh Interface) #  servicemeshinterface/smi-spec A standard interface for service meshes on Kubernetes. https://smi-spec.io/\nSMI is an abstraction layer that provides a common API surface across different service mesh technology.\nOpen Service Mesh #  Open Service Mesh (OSM) is a lightweight and extensible cloud native service mesh. https://openservicemesh.io/\n"});index.add({'id':63,'href':'/study-istio/docs/advanced/eco/other/bfe/','title':"BFE",'section':"其他",'content':"BFE #  baidu/bfe Baidu Front End 百度统一前端\n统一的百度七层（HTTP）流量接入平台\nBFE 之前的百度前端接入架构 #  流量从 BGW 接入之后直接到达了产品线的前端服务器， 这些服务器种类繁多，几乎包涵了现在流行的各种 webserver，比如 nginx,apache,lighttpd 等， 不同的服务器经过后端不同业务逻辑的处理之后打印日志内容并且将响应发送给用户。\n开发成本高 #  如果前端多个产品线需要实现一个通用功能，比如防攻击或者 IP 地域识别，需要开发不同的 webserver 模块，虽然每个模块的功能一样，但实现方式完全不同，所以存在一定的重复开发和人力资源浪费。\n维护成本高 #  不同的产品线和模块都需要一定的人力来维护。前端接入服务器类型多样，实现和原理各异，出现问题的概率大，Nginx, apache 等服务器比较稳定，高效，但是如果产品线出现强烈的个性化业务需求或者严重 BUG，开源社区很难提供及时有效的技术支持。\n数据和策略共享的成本高 #  产品线间维护不同的前端接入模块，策略和经验很难做到有效的分享。\n技术积累难 #  由于产品线间沟通和分享的成本大，很多经验和成果并没有得到有效的积累。\n BFE 架构 #  BFE 是一个七层接入系统。 它的最基本工作就是接收用户数据，解析 HTTP 请求，对内容进行过滤和分析之后再转发给后端产品线。\nBFE 最基本的工作就是从 BGW/BVS 接入流量并将流量转发给产品线的前端 webserver 或者其他接入模块，最后接收后端 server 的内容并回复给外部用户。\n反向代理服务器 #  BFE 本质上是一个反向代理服务器，每天承接百度数百亿的流量，高峰期的集群 QPS 有一百多万。 在如此大的流量压力环境中，服务器的处理性能至关重要。 BFE 采用现在业界流行的多进程全异步非阻塞事件驱动模型， 但由于业务功能繁多，产品线策略及规则复杂，任何一个开源的代理服务器比如 nginx, squid, varnish 的性能都很难满足需求。 BFE 本身也需要不断优化，降低系统资源开销，提升处理性能。\n能够在任意阶段处理用户请求 #  从接收用户请求的时候起，BFE 就能对数据进行完全的解析和过滤，能够在读取、解析、连接、写后端等的任一阶段对数据进行修改、增加、删除、丢弃等操作。\n分流策略非常高效 #  NGINX 和大部分通用的网络服务器在多个正则规则和复杂策略组合下的分流效率比较低，BFE 通过反解正则规则及嵌套分流策略实现了时间复杂度为 O(1) 的分流。\nBFE 提供统一缓存 #  BFE 提供统一缓存，用户请求可以不经过后端处理由 BFE 直接返回。\nBFE 提供灵活的缓存策略，对于 css 及不宜存放 CDN 的静态资源，BFE 缓存。\n提升超长距离的数据传输效率和响应时间 #  BFE 和 BFE 级联后可以启用 tcp fast open 及任意时间的长连接，提升超长距离的数据传输效率和响应时间。\n 防攻击系统 #  产品线各自为战的防攻击很被动，\n 各个产品线需要重复去做防御 同一个防御策略，不同的接入服务器和架构需要不同的代码和逻辑实现 公司的防攻击策略很多都是直接从产品线日志进行挖掘的，不同的服务器日志有不同的格式，众多产品线有各自的部署机房，日志传输延时大并且计算成本高，导致部分防攻击策略时延很大，无法有效实时防止外部攻击。  BFE 防攻击系统的优点： #    全局性防御\nBFE 接入目标是百度全部流量，一个策略在 BFE 生效，就可以为百度全部产品线提供保护。\n  时效性\nBFE 实时接收和分析流量，只要符合攻击特征，实时封禁攻击请求。相比 UBS 的离线日志统计和挖掘，BFE 的防攻击检测和生效延时能做到秒级。\n  支持复杂策略\nBFE 接收用户请求时需要对全部内容进行分析过滤，应用层的常见攻击都能实施有效防御。 此外，BFE 的统一防攻击系统 BDS 还在进行实时的全局攻击特征计算，对于同时符合多种封禁规则的外部请求实行封禁。\n  百度防攻击系统（BDS） #  BDS 是百度接入端全局防攻击系统，负责对接入端流量进行全局、旁路、常态的特征分析和防御处理。 主要由三个子系统组成：\n 旁路特征发送子系统（BDS Sender） 特征检测子系统（BDS Detector） 攻击防御子系统（BDS Defender）   流量调度及均衡系统 #  内网流量调度及均衡系统（GSLB） #  GSLB（global service load balance）即内网流量调度系统， 主要针对百度 IDC 内部的流量进行调度。\n它的主要目标是感知内网流量和产品线容量变化并自动地均衡调度流量。\nGSLB 要解决的主要问题描述如下：\n BFE 应该优先将流量转发给离其最近（延时最短）的 Service Cluster BFE Cluster 向下游多个 Service Cluster 的流量转发:  需要对每个下游的 Service Cluster 给出一个权重 这个权重是 gslb 的控制系统需要计算给出的    工作原理简述如下：\n调度模块根据流量采集模块采集到的实时流量数据和容量管理模块提供的容量数据实时计算出权重并将权重数据下发给 BFE， BFE 根据权重数据分配流量，实现快速的流量切换和负载均衡。\n外网流量调度及均衡系统 (GTC) #  GTC（global service control）主要针对外网流量调度。\n由于网络运营商、带宽资源、网络质量等的限制，即使同一个用户访问同一个百度服务的不同 VIP，也会带来不同的访问延时。\nGTC 要解决的主要问题是：\n对每个用户群，选择唯一的 vip，希望总延迟较小。\n 流量分析及展现 #  流量分析 #  BFE 拥有各个产品线访问日志，目前整个集群的天访问日志量有 30 多 T。包括最基本的 URI、HTTP 状态码、用户 IP、cookie、响应时间等， BFE 通过这些日志能挖掘出哪些价值？流量分析主要在以下几个方面开展工作：\n  异常检测\n本文提到的异常定义为不同于正常或者预期行为的数据模式。异常检测的研究成果目前已经应用于金融业的信用欺诈检测，网络入侵检测，医疗疾病预测等。 BFE 的异常检测主要分析访问日志中出现的各种特征数据，判断并拦截异常请求。比如可以根据用户 IP 和 COOKIE 的历史访问纪录判断该 IP 是否正常用户。\n  带宽及资源优化\n主要是针对各产品线流量的占用带宽、响应时间和页面特征优化带宽接入。尽量减少跨 IDC 流量和外网带宽资源。\n  服务质量监控\n服务质量的变化都会反映在访问日志里，响应时间上升，建立连接和重试时间增多都是服务质量下降的具体表现。BFE 希望能通过日志分析数据监控和提前预警产品线服务质量的变化。\n  流量展现 #  BFE 希望能够实时、准确地展现全百度各条产品线的流量概况，包括总流量趋势、响应时间、状态码变化、地域统计等。 但是在大流量大压力环境下，保证日志传输，数据计算的实时性、稳定性也是个非常有挑战的难题。\n 其他 #  BGW #  BVS #  UBS 日志 #  911 防攻击系统 #  公司最主要的防攻击系统就是 911\n911 运行在内核态并且主要针对四层攻击\n不支持长时间的流量清洗 #  因为长时间内核态运行很容易产生稳定性问题。\n不支持应用层协议的复杂防御 #  911 主要定位于四层防攻击，如果对七层协议进行分析和策略组合防御，性能消耗非常大。 所以无法防御很多常见的 HTTP 攻击，比如恶意 header（重定向攻击，cookie 攻击）, XSS 攻击，sql 注入等。\n BFE 未来工作（by 2014-02） #  BFE 的未来工作依然围绕四个核心模块进行：\n 高性能网络服务器技术 防攻击 流量调度及均衡 流量分析及展现  高性能网络服务器技术 #  优化网络协议 #  BFE 需要研究和应用业界最先进和成熟的网络优化协议，最主要的就是 TCP 和 HTTP。BFE 目前应用了 tcp fast open 技术，能有效减少 TCP 建立连接三次握手带来的延迟，在第一个 syn 包发出时就能开始传输数据。\nBFE 目前只支持 HTTP1.0\\1.1 协议，HTTP1.1 1999 年发布之后几乎没有很大更新。随着因特网的发展，HTTP1.1 协议的一些缺陷也遭受越来越多的诟病，比如网络连接的复用少，头部冗余数据等。做为下一代 HTTP 协议的 HTTP2.0（主要基于 SPDY 协议）草案正在讨论，预计于 2014 年提交 IETF。BFE 目前也在研究 HTTP2.0 协议内容及在 BFE 上的实现方式。\n优化并发连接处理模型 #  BFE 采用异步事件驱动实现高并发。但事件驱动的性能到底有多高？是否有新的模型支持实现百万甚至千万级的并发？这是业界广泛讨论和思考的问题。\n但事件模型也有很多缺陷，比如事件状态机的处理很复杂，事件不好管理，超时管理消耗资源等。BFE 需要考虑改进事件模型或者采用新的模型实现更高的并发。\n分流策略及计算优化 #  BFE 分流策略非常复杂，一条简单的请求往往要通过几十个规则的过滤才能到达产品线后端，怎样降低时间复杂度？减少规则计算？随着接入产品线越来越多，规则越来越复杂，BFE 需要通过优化分流策略来提升处理性能。\n防攻击技术 #  防攻击系统管理、查询平台化、接口化。 #  包括配置修改、策略修改及查询、防攻击数据查询等需求，全部实现接口化。\nWAF 研究 #  Waf 即 Web Application Firewall，是通过执行一系列针对 HTTP/HTTPS 的安全策略来专门为 Web 应用提供保护的系统。\n性能优化 #  复杂防攻击策略定制。 #  流量调度及均衡 #  加强流量调度结果的可视化\n在外网调度中支持更多的调度策略（比如：增加对带宽成本的考虑）\n在内网调度中，增加对更复杂内网环境的考虑（目前只考虑下游服务机群的故障）\n流量分析 #  流量分析争取在异常检测和服务质量监控取方面取得突破。\n"});index.add({'id':64,'href':'/study-istio/docs/advanced/eco/other/cilium/','title':"Cilium",'section':"其他",'content':"Cilium #  cilium/cilium eBPF-based Networking, Security, and Observability\n"});index.add({'id':65,'href':'/study-istio/docs/advanced/eco/other/consul/','title':"Consul",'section':"其他",'content':"Consul #  hashicorp/consul Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure. https://www.consul.io/\n"});index.add({'id':66,'href':'/study-istio/docs/advanced/eco/other/traefik-mesh/','title':"Traefik Mesh",'section':"其他",'content':"Traefik Mesh #  traefik/mesh Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure. https://www.consul.io/\n"});index.add({'id':67,'href':'/study-istio/docs/code/source/','title':"3.7 源码分析",'section':"第三部分 设计与实现",'content':"源码分析 #  "});index.add({'id':68,'href':'/study-istio/docs/advanced/eco/other/ingress/kubernetes-ingress/','title':"nginxinc/kubernetes-ingress",'section':"Ingress Controller",'content':"NGINX Ingress Controller #  nginxinc/kubernetes-ingress NGINX and NGINX Plus Ingress Controllers for Kubernetes https://docs.nginx.com/nginx-ingress-controller/\nnginxinc/kubernetes-ingress vs kubernetes/ingress-nginx #  参考：\n Differences Between nginxinc/kubernetes-ingress and kubernetes/ingress-nginx Ingress Controllers  "});index.add({'id':69,'href':'/study-istio/docs/advanced/eco/other/','title':"其他",'section':"2.8 生态",'content':"其他 #  "});index.add({'id':70,'href':'/study-istio/docs/basic/quick/faq/','title':"FAQ",'section':"1.1 快速上手",'content':"FAQ #  Istio 如何实现 Sidecar 注入？ #  Istio 如何实现流量管理？ #  如何拦截流量 intercept traffic\nIstio 是在哪一层实现流量管理？为什么要在那一层？ #  Layer7 routing\nIstio 如何实现 mTLS 认证？ #  "});index.add({'id':71,'href':'/study-istio/docs/basic/quick/kiali/','title':"Kiali",'section':"1.1 快速上手",'content':"Kiali #  kiali/kiali Kiali project, observability for the Istio service mesh\n"});})();